#!/bin/sh
#
# Extract given process SMAPS data from sp-endurance smaps.cap.lzo files.
# This file is part of sp-endurance.
#
# Copyright (C) 2009-2012 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

usage ()
{
	name=${0##*/}
	echo
	echo "usage:"
	echo "	$name <program name> [directories]"
	echo 
	echo "This can be run in the saved endurance data dir to extract"
	echo "SMAPS information for the named process(es). Or you can give"
	echo "the endurance snapshot directories from which it should"
	echo "extract the informations."
	echo
	echo "Examples:"
	echo "	$name pulseaudio"
	echo "	$name pulseaudio 020 021"
	echo
	echo "ERROR: $1!"
	echo
	exit 1
}

prog=$1
if [ -z "$prog" ]; then
	usage "Give a name for program which info should be extracted"
fi
if [ "$prog" = "-h" ] || [ "$prog" = "--help" ]; then
	usage "-h/--help given as program name"
fi
shift

echo "Searching/extracting SMAPS information for '$prog' from snapshots..."

CHECK_LZOP=""
check_lzop()
{
	if [ "$CHECK_LZOP" ] ; then
		return 0
	fi
	CHECK_LZOP=1
	which lzop >/dev/null 2>/dev/null || usage "'lzop' utility to extract SMAPS .lzo content is missing"
}

CHECK_XZ=""
check_xz()
{
	if [ "$CHECK_XZ" ] ; then
		return 0
	fi
	CHECK_XZ=1
	which xzcat >/dev/null 2>/dev/null || usage "'xzcat' utility to extract SMAPS .xz content is missing"
}

extract_info ()
{
	# get snapshot/directory name/number
	num=${1%/*}
	num=${num##*/}
	name=$prog-$num.cap
	echo "- $num"
	# uncompress, take only program info and store that
	if [ -f "$1" ] ; then
		READER="cat"
		SUFFIX=""
	elif [ -f "$1.lzo" ] ; then
		READER="lzop -c -d"
		SUFFIX="lzo"
		check_lzop
	elif [ -f "$1.xz" ] ; then
		READER="xzcat"
		SUFFIX="xz"
		check_xz
	else
		echo "ERROR: unrecognized capture compression format for file: $1" >&2
		exit 1
	fi
	$READER "$1".$SUFFIX | awk "
/^==/ {	show=0; next }
/Name: .*$prog/ { show=1 }
{ if(show) print }" > $name
}

capfile=smaps.cap

check_cap()
{
	test -f "$1/$capfile" -o -f "$1/$capfile.lzo" -o -f "$1/$capfile.xz"
}

if [ $# -gt 0 ]; then
	for dir in "$@"; do
		if [ \! -d "$dir" ]; then
			usage "Given snapshot directory '$dir' doesn't exist"
		fi
		check_cap "$dir" || usage "Given snapshot directory '$dir' doesn't have '$capfile' SMAPS capture file"
	done
	for dir in "$@"; do
		extract_info "$dir/$capfile"
	done
else
	for dir in [0-9][0-9][0-9] ; do
		check_cap "$dir" && extract_info "$dir/$capfile"
	done
fi

grep -q "Name: .*$prog" $prog-*.cap
if [ $? -ne 0 ]; then
	echo "ERROR: No matches found for program '$prog'!" 1>&2
	rm $prog-*.cap
	exit 1
fi
echo "Information extracted:"
ls $prog-*.cap
